DUDAS
=====
* Cuidado con "#VAR".match("texto") y "texto".match("#VAR"). Ambos hacen match, 
pero si estoy comparando dos Wrapper tendria que modificar el wrapper sobre el que comparo para que tenga "#VAR" 
y no "text"
 ¿como trata el search los #vARIABLE? Deberia ser capaz de decir que "hola" lo ha encontrado cuando vea un "#VAR", aunque es posible que sea arriesgado hacer esto.

CORREGIR
========


TODO
====
* Dar soporte a etiquetas: <img/>

22-06-2008
==========
[M 14:00] Tag, Text y EOF


19-06-2008
==========
[M 20:40] Iteradores terminados (next, previous, listas inteligentes, tests de granularidad fina,...)

17-06-2008
==========
[M 18:40] Where está en el constructor del operador. AddOptional revisado.
[M 17:20] Operator lanza ahora cinco operaciones, para que sea en el wrapper y en el sample
(el AddVariable solo lanza uno)

15-06-2008
==========
[M 23:59] Iteradores de token con next, hasNext y isNext, aunque el backwards hay que comprobarlo.
Backward(Item)Iterator modificado para que el padre vaya primero.
[M 01:00] ForwardTokenIterator


14-06-2008
==========
[M 23:35] Iteradores item de RoadRunner heredan de los iteradores normales de SMTree.
[M 23:25] Iteradores de SMTree dependientes sólo de SMTree. isNext pasado a SMTreeIterator
[M 23:00] Renombrados el Forward y el Backward iterator para quitarles item del nombre.
[M 20:25] Renombrado SMTreeIterator por SMTreeIterator y se le quitan las referencias a Items.
Se separan los iteradores del Wrapper (que implementan Edible) de los del SMTree. Los operadores ahora no funcionan
con los nuevos next.
[M 19:40] Wrapper.eat terminado, pero sin testear. Edible y EdibleIterator añadidos para que hagan de iteradores 
genéricos para el sample y el wrapper (con todas las modificaciones que implica eso). Los iterators del arbol hay que
modificarlos tambien, pero como se van a separar entre iteradores del arbol y del wrapper, no los he tocado aún.


13-06-2008
==========
[S 11:30] Sample:
            * nuevo metodo getAsWrapper para poder obtener como un wrapper un trozo del sample
[S 11:30] Los Items permiten clonacion... (TODO)
[S 11:00] addOptional
            * terminado?

11-06-2008
==========
[S 15:00] AmplitudIterador
[S 13:00] BackwardItemIterator

09-06-2008
==========
[S 00:00] Sample
            * isWellFormed()
            * search()
[S 00:00] AddOptional
            * Hecho al 50% aunque ese 50% esta cogido con pinzas y no me convence.
[S 00:00] SMTree:
            * metodos cloneSubTree(TODO) para clonar zonas del arbol, ideal para usarlo en wrapper.
            * Algunas de las sobrecargas de clonesubtree permiten decirle [from... to] y el otro parametro que se le pasa sera el padre que tendran
[S 00:00] Wrapper:
            * Nuevos constructores
            * metodo iterator() para abstraernos ya de los arboles
            * metodos cloneSubWrapper(TODO): similar a los cloneSubtree pero este devuelve un wrapper interno clonado, ideal para las reparaciones
            * isWellFormed()
            * search()
[S 00:00] Modificado Iteradores:
            * ahora se pueden crear usando el .class
            * los iteradores tienen una raizvirtual para hacer recorridos de subarboles
            * SMTreeIterator implementa ahora a ListIterator para que tenga metodos como previous()
            * Aun queda por ver si el previous y el hasprevious funcionan bien.

[S 12:00] Nuevos constructores para Wrapper
            *miratelos que son para no tener que manejar arboles SMTree en los operadores. 
            *Por ejemplo en vez de esto:
                    Token newToken = new Variable();
                    reparacion.setReparator(new Wrapper(new SMTree<Item>(newToken)));
            * Ahora seria:
                    reparacion.setReparator(new Wrapper(new Variable()));
[S 10:00] Correccion en el diseño: Text y Variable ya no son directamente Items, sino que heredan de Tokens que a su vez son Items
[S 09:30] Correcciones en Text y Variable
[S 09:30] Token pasa a ser abstracta

08-06-2008
==========
[M 14:00] addVariable
[M 13:00] Sample, Wrapper, Operators, Repair y Mismatch: añadidas funciones y visibilidades


07-06-2008
==========
[M 21:00] Repair. Retoques en iterador del sample, del wrapper.
[S 21:00] Operator, IOperator y sacar las  Enum fuera de Ioperator
[S 17:00] Movido Token a paquete roadrunner.node
[S 16:00] Token casi listo. Modificaciones en Item

06-06-2008
==========
[S 20:00] Wrapper casi listo, pero con muchos errores a falta de decidir que hacemos con Sample/token y corregir los Iteradores

03-03-2008
==========
[M XX:XX] Items: Token, tupla, etc.

31-05-2008
==========
[M 02:00] Iteradores


30-05-2008
==========
[M 23:59] Pruebas hechas
[S 23:59] Casi finiquitado SMTree
[S 17:00] Modificado SMTreeNode.equals: tambien considera referencias
[S 16:40] Añadido metodo RR.debug()

28-05-2008
==========
[S 19:00] Varios cambios en clases SMTree*
[S 17:35] Modificado SMTree.setRootObject(T o) y SMTree.setRoot(val). OJO con actualizar el mapa...
[S 17:30] Añadido constructor vacio SMTree()
[S 17:00] Rehaciendo el changelog a un formato ameno e intuitivo :b

27-05-2008
==========
[M 20:00] SMTree comenzado.
[M 20:00] SMTreeNode finalizado pero con dudas.
[M 20:00] SMIndexStructure: finalizado
[S 14:00] Nuevo constructor: public SMTreeNode(T o, SMTreeNode parent, SMTreeNode nextSibling, SMTreeNode previousSibling, SMTreeNode firstChild)


DUDAS SOLUCIONADAS
==================

[M 28-05-08] ¿Clone debe clonar también las referencias? Eso añadiría complejidad ya que es fácil entrar en un bucle infinito.
            ·[S] No, desde el punto de vista de un nodo no es responsabilidad suya clonar las referencias
                Seria responsabilidad de SMTree que es quien ve a los nodos como una estructura arbórea.
[M 28-05-08] ¿Debe equals comparar también las referencias?
            ·[S] Yo diría que sí. Aún así lo mismo vendría bien un método aparte que te comparase si el objeto del nodo es igual(por referencia y/o por objeto en sí) a un objeto dado.

[M 28-05-08] ¿Debe equals utilizar el hashcode y ya está? (está generado con un asistente que tiene en cuenta todos los atributos del nodo)
            ·[S] "Equal objects must produce the same hash code as long as they are equal, however unequal objects need not produce distinct hash codes."
                    Viendo esa frase de internet, que es cierta, tengo dudas. ¿buscamos una comparación exacta o algo mas rápido?

CORRECCIONES HECHAS
===================

